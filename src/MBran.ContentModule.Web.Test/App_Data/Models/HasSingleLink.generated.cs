//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1127 with alias "hasSingleLink"
	/// <summary>_HasSingleLink</summary>
	public partial interface IHasSingleLink : IPublishedContent
	{
		/// <summary>Link To</summary>
		RJP.MultiUrlPicker.Models.Link Link { get; }
	}

	/// <summary>_HasSingleLink</summary>
	[PublishedContentModel("hasSingleLink")]
	public partial class HasSingleLink : PublishedContentModel, IHasSingleLink
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "hasSingleLink";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public HasSingleLink(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<HasSingleLink, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Link To
		///</summary>
		[ImplementPropertyType("link")]
		public RJP.MultiUrlPicker.Models.Link Link
		{
			get { return GetLink(this); }
		}

		/// <summary>Static getter for Link To</summary>
		public static RJP.MultiUrlPicker.Models.Link GetLink(IHasSingleLink that) { return that.GetPropertyValue<RJP.MultiUrlPicker.Models.Link>("link"); }
	}
}
